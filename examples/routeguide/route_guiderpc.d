module routeguide.route_guiderpc;


// Generated by the gRPC dlang plugin.
// If you make any local change, they will be lost.


import routeguide.route_guide;
import std.array;
import grpc;
import google.protobuf;
import hunt.logging;
import core.thread;


class RouteGuideClient
{
    this(Channel channel)
    {
        _channel = channel;
    }

    Status GetFeature( Point request ,ref Feature response)
    {
        mixin(CM!(RouteGuideBase.SERVICE));
    }

    void GetFeature( Point request , void delegate(Status status , Feature response) dele)
    {
        mixin(CMA!(Feature , RouteGuideBase.SERVICE));
    }

    //rpc ListFeatures(Rectangle) returns (stream Feature) {}
    //// server stream
    ClientReader!Feature ListFeatures(Rectangle request){
        mixin(CM1!(Feature ,RouteGuideBase.SERVICE));
    };

    //rpc RecordRoute(stream Point) returns (RouteSummary) {}
    ///client stream
    ClientWriter!Point RecordRoute(ref RouteSummary response){
        mixin(CM2!(Point ,RouteGuideBase.SERVICE));
    }

    //rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
    /// clientServer stream
    ClientReaderWriter!(RouteNote , RouteNote) RouteChat(){
        mixin(CM3!(RouteNote ,RouteNote,RouteGuideBase.SERVICE));
    }
    
    


    private:
    Channel _channel;
}


class RouteGuideBase : GrpcService
{
    enum SERVICE  = "routeguide.RouteGuide";
    string getModule()
    {
        return SERVICE;
    }

    Status GetFeature( Point , ref Feature ){ 
        return Status.OK; 
    }

    Status ListFeatures(Rectangle  , ServerWriter!Feature ) {
        return Status.OK;
    }

    Status RecordRoute(ServerReader!Point , ref RouteSummary ){
        return Status.OK;
    }

    Status RouteChat(ServerReaderWriter!(RouteNote , RouteNote)){
        return Status.OK;
    }

    Status process(string method , GrpcStream stream)
    {
        switch(method)
        {
            mixin(SM!(Point , Feature , "GetFeature"));
            mixin(SM1!(Rectangle , Feature , "ListFeatures"));
            mixin(SM2!(Point , RouteSummary , "RecordRoute"));
            mixin(SM3!(RouteNote , RouteNote , "RouteChat"));

            mixin(NONE());
        }
    }


}